param(
    [string]$ProjectPath = "$PSScriptRoot\VRCSSDateTimeFixer\VRCSSDateTimeFixer.csproj",
    [string]$OutputPath = "$PSScriptRoot\version.ps1",
    [switch]$VerboseOutput
)

$ErrorActionPreference = "Stop"

# Reads the version from the specified .csproj and writes version.ps1
# Source of truth is the .csproj <Version> (with fallbacks if needed).
function Get-VersionFromCsproj([string]$csprojPath) {
    if (-not (Test-Path $csprojPath)) {
        throw "Project file not found: $csprojPath"
    }

    [xml]$xml = Get-Content -Path $csprojPath -Raw

    # Try <Version>
    $version = ($xml.Project.PropertyGroup | ForEach-Object { $_.Version } | Where-Object { $_ } | Select-Object -First 1)
    if ($version) { return $version }

    # Fallbacks: <PackageVersion>, <AssemblyVersion>, <FileVersion>
    $version = ($xml.Project.PropertyGroup | ForEach-Object { $_.PackageVersion } | Where-Object { $_ } | Select-Object -First 1)
    if ($version) { return $version }

    $version = ($xml.Project.PropertyGroup | ForEach-Object { $_.AssemblyVersion } | Where-Object { $_ } | Select-Object -First 1)
    if ($version) { return $version }

    $version = ($xml.Project.PropertyGroup | ForEach-Object { $_.FileVersion } | Where-Object { $_ } | Select-Object -First 1)
    if ($version) { return $version }

    # As a last resort, try to evaluate via dotnet msbuild (slower but robust)
    try {
        $evaluated = dotnet msbuild $csprojPath -nologo -v:m -t:Evaluate | Out-String
        if ($evaluated -match "(?m)^\s*Version\s*=\s*([^\r\n]+)") {
            return $Matches[1].Trim()
        }
    } catch {
        if ($VerboseOutput) { Write-Warning "dotnet msbuild evaluation failed: $_" }
    }

    return $null
}

$version = Get-VersionFromCsproj -csprojPath $ProjectPath
if (-not $version) {
    throw "Could not determine version from project: $ProjectPath. Please ensure <Version> is set in the .csproj."
}

if ($VerboseOutput) {
    Write-Host "Detected version: $version" -ForegroundColor Cyan
    Write-Host "Writing to: $OutputPath" -ForegroundColor Cyan
}

# Write version.ps1
@"
# Centralized version definition for release scripts
# Auto-generated by read_version_from_csproj.ps1 from: $([System.IO.Path]::GetFileName($ProjectPath))
# Do not edit manually. Update the <Version> in the .csproj instead.
$version = "$version"
"@ | Out-File -FilePath $OutputPath -Encoding utf8 -Force

if (Test-Path $OutputPath) {
    Write-Host "version.ps1 generated: $((Get-Item $OutputPath).FullName)" -ForegroundColor Green
} else {
    throw "Failed to write version file: $OutputPath"
}
